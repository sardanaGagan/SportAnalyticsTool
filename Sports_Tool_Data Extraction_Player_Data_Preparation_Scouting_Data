#!/usr/bin/env python
# coding: utf-8

# Importing necessary libraries
import pandas as pd
import numpy as np
import warnings
from tqdm import tqdm
import requests
from bs4 import BeautifulSoup
import re

# Function to fetch tables using BeautifulSoup
def get_tables(url, text):
    res = requests.get(url)
    # Regular expression to remove comments in HTML
    comm = re.compile("<!--|-->")
    soup = BeautifulSoup(comm.sub("", res.text), 'lxml')
    all_tables = soup.findAll("tbody")
    
    team_table = all_tables[0]
    team_vs_table = all_tables[1]
    player_table = all_tables[2]
    if text == 'for':
        return player_table, team_table
    if text == 'vs':
        return player_table, team_vs_table

# Function to extract data from a table and create a DataFrame
def get_frame(features, player_table):
    pre_df_player = dict()
    features_wanted_player = features
    rows_player = player_table.find_all('tr')
    for row in rows_player:
        if(row.find('th', {"scope": "row"}) is not None):
            for f in features_wanted_player:
                cell = row.find("td", {"data-stat": f})
                if cell is None:
                    pass
                else:
                    a = cell.text.strip().encode()
                    text = a.decode("utf-8")
                    if text == '':
                        text = '0'
                    if (f != 'player') and (f != 'nationality') and (f != 'position') and (f != 'team') and (f != 'age') and (f != 'birth_year'):
                        text = float(text.replace(',', ''))
                    if f in pre_df_player:
                        pre_df_player[f].append(text)
                    else:
                        pre_df_player[f] = [text]
    df_player = pd.DataFrame.from_dict(pre_df_player)
    return df_player

# Function to fetch data for a specific category and create a DataFrame
def frame_for_category(category, top, end, features):
    url = (top + category + end)
    player_table, team_table = get_tables(url, 'for')
    df_player = get_frame(features, player_table)
    return df_player

# Function to get player data for outfield players
def get_outfield_data(top, end):
    stats_df = frame_for_category('stats', top, end, stats)
    shooting_df = frame_for_category('shooting', top, end, shooting)
    passing_df = frame_for_category('passing', top, end, passing)
    passing_types_df = frame_for_category('passing_types', top, end, pass_types)
    gca_df = frame_for_category('gca', top, end, gca)
    defense_df = frame_for_category('defense', top, end, defense)
    possession_df = frame_for_category('possession', top, end, possession)
    misc_df = frame_for_category('misc', top, end, misc)
    complete_data = pd.concat([stats_df, shooting_df, passing_df, passing_types_df, gca_df, defense_df, possession_df, misc_df], axis=1)
    complete_data = complete_data.loc[:, ~complete_data.columns.duplicated()]
    return complete_data

# Function to get goalkeeper data
def get_keeper_data(top, end):
    keepers_df = frame_for_category('keepers', top, end, keepers)
    keepers_df = keepers_df.loc[:, ~keepers_df.columns.duplicated()]
    return keepers_df

# List of required standard stats
stats = ["player", "nationality", "position", "team", "age", "birth_year", "games", "games_starts", "minutes", "minutes_90s",
         "goals", "assists", "goals_assists", "goals_pens", "pens_made", "pens_att", "cards_yellow", "cards_red", "xg", "npxg",
         "xg_assist", "npxg_xg_assist", "progressive_carries", "progressive_passes", "progressive_passes_received",
         "goals_per90", "assists_per90", "goals_assists_per90", "goals_pens_per90", "goals_assists_pens_per90", "xg_per90",
         "xg_assist_per90", "xg_xg_assist_per90", "npxg_per90", "npxg_xg_assist_per90"]

# List of goalkeeper stats
keepers = ["player", "nationality", "position", "team", "age", "birth_year", "gk_games", "gk_games_starts", "gk_minutes",
           "minutes_90s", "gk_goals_against", "gk_goals_against_per90", "gk_shots_on_target_against", "gk_saves",
           "gk_save_pct", "gk_wins", "gk_ties", "gk_losses", "gk_clean_sheets", "gk_clean_sheets_pct", "gk_pens_att",
           "gk_pens_allowed", "gk_pens_saved", "gk_pens_missed", "gk_pens_save_pct"]

# List of advanced goalkeeper stats (commented out)
# keepersadv = [...]

# List of shooting stats
shooting = ["player", "nationality", "position", "team", "age", "birth_year", "minutes_90s", "goals", "shots",
            "shots_on_target", "shots_on_target_pct", "shots_per90", "shots_on_target_per90", "goals_per_shot",
            "goals_per_shot_on_target", "average_shot_distance", "shots_free_kicks", "pens_made", "pens_att", "xg", "npxg",
            "npxg_per_shot", "xg_net", "npxg_net"]

# List of passing stats
passing = ["player", "nationality", "position", "team", "age", "birth_year", "minutes_90s", "passes_completed", "passes",
           "passes_pct", "passes_total_distance", "passes_progressive_distance", "passes_completed_short", "passes_short",
           "passes_pct_short", "passes_completed_medium", "passes_medium", "passes_pct_medium", "passes_completed_long",
           "passes_long", "passes_pct_long", "assists", "xg_assist", "pass_xa", "xg_assist_net", "assisted_shots",
           "passes_into_final_third", "passes_into_penalty_area", "crosses_into_penalty_area", "progressive_passes"]

# List of passing types stats
pass_types = ["player", "nationality", "position", "team", "age", "birth_year", "minutes_90s", "passes", "passes_live",
              "passes_dead", "passes_free_kicks", "through_balls", "passes_switches", "crosses", "throw_ins", "corner_kicks",
              "corner_kicks_in", "corner_kicks_out", "corner_kicks_straight", "passes_completed", "passes_offsides",
              "passes_blocked"]

# List of goal and shot creation stats
gca = ["player", "nationality", "position", "team", "age", "birth_year", "minutes_90s", "sca", "sca_per90",
       "sca_passes_live", "sca_passes_dead", "sca_take_ons", "sca_shots", "sca_fouled", "sca_defense", "gca", "gca_per90",
       "gca_passes_live", "gca_passes_dead", "gca_take_ons", "gca_shots", "gca_fouled", "gca_defense"]

# List of defensive actions stats
defense = ["player", "nationality", "position", "team", "age", "birth_year", "minutes_90s", "tackles", "tackles_won",
           "tackles_def_3rd", "tackles_mid_3rd", "tackles_att_3rd", "challenge_tackles", "challenges",
           "challenge_tackles_pct", "challenges_lost", "blocks", "blocked_shots", "blocked_passes", "interceptions",
           "tackles_interceptions", "clearances", "errors"]

# List of possession stats
possession = ["player", "nationality", "position", "team", "age", "birth_year", "minutes_90s", "touches", "touches_def_pen_area",
              "touches_def_3rd", "touches_mid_3rd", "touches_att_3rd", "touches_att_pen_area", "touches_live_ball",
              "take_ons", "take_ons_won", "take_ons_won_pct", "take_ons_tackled", "take_ons_tackled_pct", "carries",
              "carries_distance", "carries_progressive_distance", "progressive_carries", "carries_into_final_third",
              "carries_into_penalty_area", "miscontrols", "dispossessed", "passes_received", "progressive_passes_received"]

# List of playing time stats (commented out)
# playingtime = [...]

# List of miscellaneous stats
misc = ["player", "nationality", "position", "team", "age", "birth_year", "minutes_90s", "cards_yellow", "cards_red",
        "cards_yellow_red", "fouls", "fouled", "offsides", "crosses", "interceptions", "tackles_won", "pens_won",
        "pens_conceded", "own_goals", "ball_recoveries", "aerials_won", "aerials_lost", "aerials_won_pct"]

# List of years to scrape data for
year_lst = ['2017-2018', '2018-2019', '2019-2020', '2020-2021', '2021-2022', '2022-2023']

player_complete_data = []
keepers_complete_data = []

# URLs for different leagues and seasons
laliga_first_half = 'https://fbref.com/en/comps/12/'
laliga_second_half = '/La-Liga-Stats'

bundesliga_first_half = 'https://fbref.com/en/comps/20/'
bundesliga_second_half = '/Bundesliga-Stats'

premier_league_first_half = 'https://fbref.com/en/comps/9/'
premier_league_second_half = '/Premier-League-Stats'

league_1_first_half = 'https://fbref.com/en/comps/13/'
league_1_second_half = '/Ligue-1-Stats'

serie_a_first_half = 'https://fbref.com/en/comps/11/'
serie_a_second_half = '/Serie-A-Stats'

# Scraping player data for each year
for year in tqdm(year_lst):
    player_extracted_data = get_outfield_data(laliga_first_half + year + '/', laliga_second_half)
    player_extracted_data.insert(0, 'Year', str(year.split('-')[0]))
    player_complete_data.append(player_extracted_data)
player_df = pd.concat(player_complete_data)

# Saving player data to a CSV file
player_df.to_csv("player_combined_data.csv", index=False, encoding='utf-8-sig')

# Scraping goalkeeper data for each year
for year in tqdm(year_lst):
    keepers_extracted_data = get_keeper_data(laliga_first_half + year + '/', laliga_second_half)
    keepers_extracted_data.insert(0, 'Year', str(year.split('-')[0]))
    keepers_complete_data.append(keepers_extracted_data)
keepers_df = pd.concat(keepers_complete_data)

# Saving goalkeeper data to a CSV file
keepers_df.to_csv("keepers_combined_data.csv", index=False, encoding='utf-8-sig')

# Extracting scouting data for different leagues and seasons
laliga_df = player_df[player_df["Year"] == player_df["Year"].max()].iloc[:, 1:]
laliga_df['league'] = 'LaLiga'
laliga_keepers_df = keepers_df[keepers_df["Year"] == player_df["Year"].max()].iloc[:, 1:]
laliga_keepers_df['league'] = 'LaLiga'

bundesliga_df = get_outfield_data(bundesliga_first_half, bundesliga_second_half)
bundesliga_df['league'] = 'Bundesliga'
keepers_bundesliga_df = get_keeper_data(bundesliga_first_half, bundesliga_second_half)
keepers_bundesliga_df['league'] = 'Bundesliga'

premier_league_df = get_outfield_data(premier_league_first_half, premier_league_second_half)
premier_league_df['league'] = 'Premier League'
keepers_premier_league_df = get_keeper_data(premier_league_first_half, premier_league_second_half)
keepers_premier_league_df['league'] = 'Premier League'

ligue_league_df = get_outfield_data(league_1_first_half, league_1_second_half)
ligue_league_df['league'] = 'League 1'
keepers_ligue_league_df = get_keeper_data(league_1_first_half, league_1_second_half)
keepers_ligue_league_df['league'] = 'League 1'

serie_league_df = get_outfield_data(serie_a_first_half, serie_a_second_half)
serie_league_df['league'] = 'Serie A'
keepers_serie_league_df = get_keeper_data(serie_a_first_half, serie_a_second_half)
keepers_serie_league_df['league'] = 'Serie A'

# Combining scouting data from different leagues
scouting_player_list = [laliga_df, bundesliga_df, premier_league_df, ligue_league_df, serie_league_df]
scouting_keepers_list = [laliga_keepers_df, keepers_bundesliga_df, keepers_premier_league_df, keepers_ligue_league_df, keepers_serie_league_df]

all_league_player_scouting_data = pd.concat(scouting_player_list)
all_league_keeper_scouting_data = pd.concat(scouting_keepers_list)

# Merging player and goalkeeper data
all_league_scouting_data = all_league_player_scouting_data.merge(all_league_keeper_scouting_data,
                                                                on=["player", "team", "age", "position", "nationality", "birth_year", "minutes_90s", "league"], how="outer")

# Renaming column "squad" to "team"
all_league_scouting_data.columns = all_league_scouting_data.columns.map(lambda x: 'squad' if x == 'team' else x)

# Extracting the correct value for nationality
all_league_scouting_data.nationality = all_league_scouting_data.nationality.map(lambda x: 'NA' if x == '0' else x.split(" ")[1])

# Removing duplicates, if any
all_league_scouting_data.drop_duplicates(subset=["player"], inplace=True)

# Saving scouting data to a CSV file
all_league_scouting_data.to_csv("all_league_scouting_data.csv", index=False, encoding='utf-8-sig')
