#!/usr/bin/env python
# coding: utf-8

#### importing libraries
from statsbombpy import sb
import pandas as pd
import numpy as np
from tqdm import tqdm
import warnings
import ast
warnings.filterwarnings("ignore")


#### variables
event_data_lst = []


def str_to_list(val):
    """
    Convert a string representation of a list to a Python list.

    Parameters:
    - val: The value to be converted to a list.

    Returns:
    - If the value is NaN, return [NaN, NaN].
    - If the value is a string representation of a list, convert it to a Python list and return the result.

    Example:
    >>> str_to_list("[1, 2, 3]")
    [1, 2, 3]

    >>> str_to_list("nan")
        [nan, nan]
    """
    if str(val) == 'nan':  # if the value is NaN
        return [np.nan, np.nan]
    else:  # if the value is not NaN
        return ast.literal_eval(str(val))

#### competiton dataframe creation
event_data = sb.competitions()
# event_data[event_data['competition_name'] == 'La Liga']
# sb.matches(competition_id=11, season_id=90)
# match_data  = sb.events(match_id=3773457)

#### looping through the competition id and season id to get a few La Liga matches from the season 2021-22
for data_ in tqdm(sb.matches(competition_id=11, season_id=90)[["match_id", "match_date", "home_team", "away_team"]].values):
    event_data_df = sb.events(match_id=data_[0])
    event_data_df["match_name"] = data_[2] + " vs " + data_[3]  # creating fixture
    event_data_df["match_date"] = data_[1]  # creating match date
    event_data_lst.append(event_data_df)  # appending data to the event list

complete_event_data_df = pd.concat(event_data_lst)  # creating event dataframe

#### Apply str_to_list function to column
complete_event_data_df['location'] = complete_event_data_df['location'].apply(str_to_list)
complete_event_data_df["carry_end_location"] = complete_event_data_df["carry_end_location"].apply(str_to_list)
complete_event_data_df["goalkeeper_end_location"] = complete_event_data_df["goalkeeper_end_location"].apply(str_to_list)
complete_event_data_df["pass_end_location"] = complete_event_data_df["pass_end_location"].apply(str_to_list)
complete_event_data_df["shot_end_location"] = complete_event_data_df["shot_end_location"].apply(str_to_list)


#### Split list into two columns
complete_event_data_df[['location_X', 'location_Y']] = pd.DataFrame(complete_event_data_df['location'].tolist(), index=complete_event_data_df.index)
complete_event_data_df[['carry_end_location_X', 'carry_end_location_Y']] = pd.DataFrame(complete_event_data_df['carry_end_location'].tolist(), index=complete_event_data_df.index)
complete_event_data_df[['goalkeeper_end_location_X', 'goalkeeper_end_location_Y']] = pd.DataFrame(complete_event_data_df['goalkeeper_end_location'].tolist(), index=complete_event_data_df.index)
complete_event_data_df[['pass_end_location_X', 'pass_end_location_Y']] = pd.DataFrame(complete_event_data_df['pass_end_location'].tolist(), index=complete_event_data_df.index)
complete_event_data_df[['shot_end_location_X', 'shot_end_location_Y', 'shot_end_location_Z']] = pd.DataFrame(complete_event_data_df['shot_end_location'].tolist(), index=complete_event_data_df.index)


complete_event_data_df.to_csv("laliga_event_data_v1.csv", index=False, encoding='utf-8-sig')
complete_event_data_df.to_csv("laliga_event_data_v2.csv", index=False, encoding='utf-8-sig')
